{
  "id": "dora.dev_1751015828477_ZG9yYS5k",
  "source": "dora.dev",
  "url": "https://dora.dev/capabilities/teams-empowered-to-choose-tools/",
  "title": "DORA | Capabilities: Empowering teams to choose tools",
  "content": "If you want to achieve higher software delivery performance and increase the job satisfaction of your technical staff, you should empower them to make informed choices about the tools and technologies they use to do their work. Research (PDF) from the DORA team shows this contributes to better continuous delivery and higher software delivery performance. Teams that can choose their own tools are able to make these choices based on how they work and the tasks they need to perform. No one knows better than practitioners what they need to be effective, so it’s not surprising that practitioner tool choice helps to drive better outcomes. Allowing teams to choose tools doesn’t mean each team is given free rein to select any tool they want. Introducing technologies without any constraints can increase technical debt and fragility. However, when you combine tool choice with other capabilities—for example, a full view of the system, fast feedback, and the understanding that they are responsible for the code that they write—it helps your technologists make wise decisions about tools they will use and need to support. This pattern has been observed at companies like Google and Netflix, where a preferred technical stack is supported by default. But if a team feels strongly that a different tool or technology is best for their case, they are free to choose it. Teams understand that their choice comes with the understanding that they must also do the work of supporting this new technical stack. How to empower teams to choose toolslink click to copy link When your organization empowers teams to select tools, it’s important to balance the freedom to choose tools with the cost to acquire and support them, and the added potential complexity of communicating between teams that use different tools. The following are some ways you might empower teams to choose their own tools. Establish a cross-team baseline. With representatives from different teams and cross-functional areas (product managers, developers, testers, operators), establish a baseline of approved tooling. We recommend that the baseline set of tools be large and diverse enough to address the majority of the needs of your organization. Examples of tools to include in the baseline are programming languages and libraries, testing and deployment tools, monitoring infrastructure, and data backends. Periodically review the tools. Periodically or as a part of sprint retrospectives, critically evaluate the baseline toolset to examine their effectiveness. These reviews also provide opportunities to discuss and demonstrate new technologies. Define a process for exceptions. Create a clearly defined process for deviating from the base toolset. When a new technology is used that’s outside of the baseline for a project, document what the new tool is and why it was used. This documentation is critical when troubleshooting and maintaining the project. Additionally, the documentation included in the projects can be used later to justify adding the tool to the baseline. An alternative approach is to let teams select their tools. With this strategy, each team addresses as much of the software delivery process (business requirements, development, operations) as appropriate, using their own tool chain. However, be sure that you consider the impact on communication between teams and product areas when there are shared resources. Common pitfallslink click to copy link The most common pitfall when empowering your teams to choose tools is to take an extreme stance—for example, giving your engineers zero choice in the matter or giving your engineers too much choice. Forcing tools and technologies on practitioners can improve standardization. However, what works in some cases is not necessarily the best solution in every case. This approach also limits opportunities for experimentation and growth, where emerging technologies can be tried and tested. Often, experimenting with new technologies and adopting them results in large performance gains. For example, if no teams had been allowed to experiment with containerization or platform as a service when those were new technologies, their organizations would not have realized the resulting performance gains. At the other extreme, choosing different tools and technologies for every different project or service can introduce technical debt and increase fragility. Each time something is added to the tool chain, maintenance and operational expenses increase. Over time, those expenses can negate the performance gained from the new technology. Ways to improve tool choice in teamslink click to copy link The key aspect of performance in tool choice is allowing the teams doing the work to select the best tools for the work. Based on that, here are some suggestions: Periodically assess the tech stack. During assessments, encourage team members to critically evaluate how well the current tools address requirements. Additionally, during these reviews, discuss issues with the existing tools and potential new tool experimentation can be discussed and planned. Proactively investigate new tools for new projects. Have members of the teams think about and experiment with new tools to determine whether those tools are worth supporting. Try implementing a key piece of the new system using both existing and proposed technologies to see whether the expected benefits materialize. When you select technologies, have a good understanding of the costs associated with the technology. These might include licensing, support, and the infrastructure required to run the tools. You might also need to hire more people to help with adopting and maintaining the technology. Schedule time to experiment with new tools. Periodically, hold sessions (such as hackathons) where teams can play around with new projects and new technologies. Not all tools will be kept as a result of these experiments. But the important point is that you’re easing these new technologies into your stack or decide they aren’t appropriate. Hold regular presentations to discuss new tools. Sponsor organized meetings (such as lunch meetings) where new tech is presented and discussed. They can be informal meetings where one person does a presentation about a project they are working on in a new tech, or something they are investigating. Informal meetings like these are a good way for the group to talk about new technologies and stay up to date. A good approach is to rotate the presentations, with team members taking turns presenting Or you can invite people from other teams or someone from outside of the company to present. Including people from outside the organization can be particularly helpful, because if they have experience with a tool, they can discuss hidden costs and complexities that will only be apparent after longer-term use. The goal is to find ways to introduce technologies into the conversation and make sure the team is empowered to make the tool and technology decisions that are appropriate for them. An outcome of these conversations may be to stick with the tools they have right now. Ways to measure if teams are empowered to choose toolslink click to copy link The best way to determine whether teams feel that they’re empowered to choose tools is to ask. You don’t want to measure this by counting how many tools the team uses or how often teams change tools, because the team might be sticking with the same tool, or might be changing tools, because they are being told they have to. What’s nextlink click to copy link For links to other articles and resources, see the Google Cloud DevOps page. Explore our DevOps research program. Take the DORA quick check to understand where you stand in comparison with the rest of the industry.",
  "timestamp": "2025-06-27T09:17:08.477Z",
  "metadata": {
    "domain": "dora.dev",
    "contentType": "public",
    "authMethod": "none",
    "wordCount": 1232,
    "links": [
      "https://dora.dev/",
      "https://dora.dev/publications/",
      "https://dora.dev/research/",
      "https://dora.dev/capabilities/",
      "https://dora.dev/guides/",
      "https://dora.dev/quickcheck/",
      "https://dora.community/",
      "https://dora.dev/search/",
      "https://google.qualtrics.com/jfe/form/SV_40i28bp9qIMfNjw?source=doradotdev-survey",
      "https://dora.dev/capabilities",
      "https://dora.dev/capabilities/job-satisfaction",
      "https://dora.dev/research/2017-and-earlier/2017-state-of-devops-report.pdf",
      "https://dora.dev/capabilities/team-experimentation",
      "https://cloud.google.com/devops",
      "https://dora.dev/capabilities/code-maintainability/",
      "https://dora.dev/capabilities/documentation-quality/",
      "https://dora.dev/capabilities/teams-empowered-to-choose-tools/",
      "https://dora.dev/capabilities/generative-organizational-culture/",
      "https://dora.dev/capabilities/job-satisfaction/",
      "https://dora.dev/capabilities/learning-culture/",
      "https://dora.dev/capabilities/team-experimentation/",
      "https://dora.dev/capabilities/transformational-leadership/",
      "https://dora.dev/capabilities/well-being/",
      "https://dora.dev/capabilities/continuous-delivery/",
      "https://dora.dev/capabilities/database-change-management/",
      "https://dora.dev/capabilities/deployment-automation/",
      "https://dora.dev/capabilities/flexible-infrastructure/",
      "https://dora.dev/capabilities/loosely-coupled-teams/",
      "https://dora.dev/capabilities/streamlining-change-approval/",
      "https://dora.dev/capabilities/trunk-based-development/",
      "https://dora.dev/capabilities/version-control/",
      "https://dora.dev/capabilities/visual-management/",
      "https://dora.dev/capabilities/wip-limits/",
      "https://dora.dev/capabilities/working-in-small-batches/",
      "https://dora.dev/capabilities/continuous-integration/",
      "https://dora.dev/capabilities/customer-feedback/",
      "https://dora.dev/capabilities/monitoring-and-observability/",
      "https://dora.dev/capabilities/monitoring-systems/",
      "https://dora.dev/capabilities/pervasive-security/",
      "https://dora.dev/capabilities/proactive-failure-notification/",
      "https://dora.dev/capabilities/test-automation/",
      "https://dora.dev/capabilities/test-data-management/",
      "https://dora.dev/capabilities/work-visibility-in-value-stream/",
      "https://cloud.google.com/",
      "https://dora.dev/resources/",
      "https://dora.dev/faq/",
      "https://dora.dev/contact/",
      "https://creativecommons.org/licenses/by-nc-sa/4.0/",
      "https://www.linkedin.com/company/doradotdev/",
      "https://www.youtube.com/@dora-dev",
      "https://github.com/dora-team/dora.dev"
    ],
    "images": [
      "https://dora.dev/img/dora-logo.svg",
      "https://dora.dev/img/cloud-logo-dark.svg"
    ],
    "headings": [
      "H4: Capabilities: climate for learning",
      "H1: Empowering teams to choose tools\n    core",
      "H2: How to empower teams to choose toolslink click to copy link",
      "H2: Common pitfallslink click to copy link",
      "H2: Ways to improve tool choice in teamslink click to copy link",
      "H2: Ways to measure if teams are empowered to choose toolslink click to copy link",
      "H2: What’s nextlink click to copy link",
      "H4: Capabilities",
      "H5: Climate for Learning",
      "H5: Fast Flow",
      "H5: Fast Feedback"
    ],
    "description": "DORA is a long running research program that seeks to understand the capabilities that drive software delivery and operations performance. DORA helps teams apply those capabilities, leading to better organizational performance.",
    "keywords": "DevOps, Lead time, Deploy frequency, Change fail rate, MTTR, Time to restore, metrics, DORA",
    "author": "",
    "language": "en"
  },
  "filePath": "C:\\agents\\kb-agent\\scraped\\dora.dev\\2025\\06\\1751015828477_DORA_Capabilities_Empowering_teams_to_choose_tools.json"
}